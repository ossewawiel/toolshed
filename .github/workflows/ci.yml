name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.configureondemand=true"

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        java: [21]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better caching
    
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-home-cache-cleanup: true
        cache-read-only: ${{ github.ref != 'refs/heads/master' }}
        
    - name: Make Gradle Wrapper Executable (Linux/macOS)
      if: runner.os != 'Windows'
      run: chmod +x gradlew
      
    - name: Validate Gradle Wrapper
      run: ./gradlew --version
      
    - name: Run Build
      run: ./gradlew build --no-configuration-cache --stacktrace
      
    - name: Run Tests
      run: ./gradlew test --no-configuration-cache
      
    - name: Generate Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results (${{ matrix.os }})
        path: '**/build/test-results/test/TEST-*.xml'
        reporter: java-junit
        
    - name: Upload Build Artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          **/build/libs/*.jar
          **/build/distributions/
        retention-days: 7

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Run Detekt Static Analysis
      run: ./gradlew detekt --no-configuration-cache
      
    - name: Upload Detekt Reports
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: detekt-reports
        path: '**/build/reports/detekt/'
        retention-days: 7
        
    - name: Run Dokka Documentation
      run: ./gradlew dokkaHtml --no-configuration-cache
      
    - name: Upload Documentation
      uses: actions/upload-artifact@v4
      with:
        name: dokka-docs
        path: '**/build/dokka/'
        retention-days: 7

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Run OWASP Dependency Check
      run: ./gradlew dependencyCheckAnalyze --no-configuration-cache
      continue-on-error: true
      env:
        # NVD_API_KEY: ${{ secrets.NVD_API_KEY }}  # Optional: Add NVD API key for faster updates
      
    - name: Upload Security Report
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: '**/build/reports/dependency-check/'
        retention-days: 14
        
    - name: Check for High Severity Vulnerabilities
      run: |
        if find . -name "dependency-check-report.html" -exec grep -l "HIGH\|CRITICAL" {} \; | grep -q .; then
          echo "‚ùå HIGH or CRITICAL severity vulnerabilities found!"
          echo "Please review the dependency-check report and update vulnerable dependencies."
          exit 1
        else
          echo "‚úÖ No HIGH or CRITICAL severity vulnerabilities found."
        fi

  performance-validation:
    name: Performance Validation
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Build Performance Check
      run: |
        echo "üìä Starting build performance validation..."
        start_time=$(date +%s)
        ./gradlew build --no-configuration-cache --quiet
        end_time=$(date +%s)
        build_duration=$((end_time - start_time))
        
        echo "üèóÔ∏è Build completed in ${build_duration} seconds"
        
        # Validate build time (should be reasonable for CI)
        if [ $build_duration -gt 300 ]; then
          echo "‚ö†Ô∏è Build time exceeded 5 minutes (${build_duration}s). Consider optimization."
        else
          echo "‚úÖ Build time within acceptable range (${build_duration}s)"
        fi
        
    - name: Memory Usage Validation
      run: |
        echo "üß† Memory usage validation..."
        ./gradlew build --no-configuration-cache --info | grep -i "memory\|heap" || true
        echo "‚úÖ Memory usage check completed"

  integration-verification:
    name: Integration Verification
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'temurin'
        
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      
    - name: Verify All Modules Build Independently
      run: |
        echo "üîç Verifying individual module builds..."
        modules=("shared-theme" "i18n-library" "ui-components" "plugin-api" "master-app" "tools:server-configuration")
        
        for module in "${modules[@]}"; do
          echo "Building module: $module"
          ./gradlew :$module:build --no-configuration-cache
          if [ $? -eq 0 ]; then
            echo "‚úÖ Module $module built successfully"
          else
            echo "‚ùå Module $module build failed"
            exit 1
          fi
        done
        
    - name: Verify Inter-Module Dependencies
      run: |
        echo "üîó Verifying inter-module dependencies..."
        ./gradlew dependencies --configuration jvmCompileClasspath --no-configuration-cache | head -50
        echo "‚úÖ Dependency verification completed"
        
    - name: Final Integration Test
      run: |
        echo "üß™ Running final integration verification..."
        ./gradlew clean build --no-configuration-cache
        echo "‚úÖ Complete integration test passed"